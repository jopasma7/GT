from utils.selenium import *
from utils.config import COOKIES_FILE
from funciones.extra import *
from funciones.coincidencias import analizar_coincidencias_simple
from funciones.registro import *
from funciones.resumen import *
from funciones.recursos import *
from utils.stealth import get_random_headers, human_delay, add_mouse_simulation
import requests
import os
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import time

# Par√°metros de b√∫squeda mejorados
def get_session_headers():
    return get_random_headers()

def iniciar_sesion():
    """
    Inicia sesi√≥n en la p√°gina especificada y devuelve una sesi√≥n autenticada.
    Si se proporciona cookies_file, intenta cargar cookies desde ah√≠.
    """
    session = requests.Session()
    headers = {"User-Agent": "Mozilla/5.0"}

    # Si tienes una funci√≥n para cargar cookies, √∫sala aqu√≠
    if COOKIES_FILE:
        try:
            cookies_dict = load_cookies()
            if cookies_dict:
                session.cookies.update(cookies_dict)
                if verify_cookies(session, headers): # Verifica si las cookies son v√°lidas
                    return session
                else:
                    print("‚ùå Cookie caducada o inv√°lida. Iniciando login con Selenium...")
                    selenium_login_and_save_cookies()
                    cookies_dict = load_cookies()
                    session.cookies.update(cookies_dict)
                    if verify_cookies(session, headers):
                        print("‚úÖ Cookie v√°lida tras login Selenium.")
                        return session
                    else:
                        print("‚ùå No se pudo autenticar. Saliendo.")
                        exit()
            else:
                print("No hay cookies guardadas. Iniciando login con Selenium...")
                selenium_login_and_save_cookies()
                cookies_dict = load_cookies()
                session.cookies.update(cookies_dict)
                if verify_cookies(session, headers):
                    print("‚úÖ Cookie v√°lida tras login Selenium.")
                    return session
                else:
                    print("‚ùå No se pudo autenticar. Saliendo.")
                    exit()
        except ImportError:
            print("No se encontr√≥ el m√≥dulo para gestionar cookies. Se usar√° sesi√≥n sin cookies.")
    else:
        print("La cookies no est√°n disponibles.")

    # Si no hay cookies, puedes implementar aqu√≠ un login manual si lo necesitas
    # session.post(url_login, data=payload, headers=headers)
    return session

def buscar_jugador_por_nombre(player_name=None, preguntar_si_vacio=True):
    from funciones.extra import color_texto
    # Si player_name viene de coincidencias, no preguntar
    if preguntar_si_vacio:
        player_name = input(color_texto("Introduce el nombre del jugador a buscar: ", "verde")).strip()
        if not player_name:
            print(color_texto("No se introdujo ning√∫n nombre.", "rojo"))
            return
    
    # Simular comportamiento humano antes de buscar
    print(color_texto(f"üîç Preparando b√∫squeda del jugador '{player_name}'...", "azul"))
    add_mouse_simulation()  # Simula tiempo de preparaci√≥n
    
    headers = get_session_headers()  # Headers din√°micos
    
    payload = {
        "multi_name": player_name,
        "action": "search_user_by_name"
    }
    
    # Pausa antes de hacer la petici√≥n
    delay = human_delay(base_min=3, base_max=8)
    print(color_texto(f"‚è≥ Iniciando b√∫squeda en {delay:.1f}s...", "gris"))
    time.sleep(delay)
    
    response = iniciar_sesion().get(utils.config.get_top_1000_url(), params=payload, headers=headers)
    if response.status_code == 200:
        print(f"\nüîç B√∫squeda realizada para el jugador '{player_name}'.")
        mostrar_info_jugador(response.text)
        menu_player(player_name)
    else:
        print("‚ùå Error al buscar el jugador. La p√°gina no se encontr√≥ o no se pudo acceder.")
        return None

def mostrar_info_jugador(html):
    """
    Extrae y muestra por consola la informaci√≥n principal del jugador y la tabla de cookies.
    Adem√°s, copia la ID del jugador al portapapeles.
    """
    from bs4 import BeautifulSoup
    import pyperclip

    soup = BeautifulSoup(html, "html.parser")
    tabla = soup.find("table", class_="vis player_info")
    if not tabla:
        print("No se encontr√≥ la tabla de informaci√≥n del jugador.")
        return

    # Extraer nombre e ID y otros campos relevantes
    nombre = None
    player_id = None
    info = {}
    campos_mostrar = ["VIP", "E-Mail", "Language", "Start date", "Tribe"]
    for th in tabla.find_all("th"):
        span = th.find("span", style=True)
        if span:
            nombre = span.text.strip()
    for tr in tabla.find_all("tr"):
        tds = tr.find_all("td")
        if len(tds) == 2:
            clave = tds[0].get_text(strip=True).replace(":", "")
            valor = tds[1].get_text(strip=True)
            if clave == "ID":
                player_id = valor
            if clave in campos_mostrar:
                info[clave] = valor

    print("‚ïê" * 55)
    print(f"  üë§ Jugador: {nombre if nombre else 'Desconocido'}")
    print(f"  üÜî ID: {player_id if player_id else 'N/A'}")
    for campo in campos_mostrar:
        emoji = {
            "VIP": "üíé",
            "E-Mail": "üìß",
            "Language": "üåê",
            "Start date": "üìÖ",
            "Tribe": "üõ°Ô∏è"
        }.get(campo, "")
        print(f"  {emoji} {campo}: {info.get(campo, '')}")
    print("‚ïê" * 55)

    # Copiar la ID al portapapeles si existe
    if player_id:
        try:
            pyperclip.copy(player_id)
            print(f"\nüìã La ID del jugador {nombre if nombre else ''} ({player_id}) se ha copiado al portapapeles.")
        except Exception:
            print("‚ö†Ô∏è  No se pudo copiar la ID al portapapeles (¬øfalta pyperclip?).")

    # Buscar la tabla de cookies (la tabla interna con encabezado "Cookie")
    tabla_cookies = None
    for t in tabla.find_all("table", class_="vis"):
        encabezados = [th.get_text(strip=True) for th in t.find_all("th")]
        if "Cookie" in encabezados:
            tabla_cookies = t
            break

    if tabla_cookies:
        print("\nüç™ Cookies asociadas:")
        headers = [th.get_text(strip=True) for th in tabla_cookies.find_all("th")]
        ancho_col = [max(len(h), 12) for h in headers]
        filas = []
        for tr in tabla_cookies.find_all("tr")[1:]:
            tds = tr.find_all("td")
            if tds:
                fila = [td.get_text(" ", strip=True) for td in tds]
                filas.append(fila)
                for i, valor in enumerate(fila):
                    if i < len(ancho_col):
                        ancho_col[i] = max(ancho_col[i], len(valor))
        # Imprimir encabezados
        encabezado = " | ".join(h.ljust(ancho_col[i]) for i, h in enumerate(headers))
        print("‚îÄ" * len(encabezado))
        print(encabezado)
        print("‚îÄ" * len(encabezado))
        # Imprimir filas
        for fila in filas:
            print(" | ".join(fila[i].ljust(ancho_col[i]) for i in range(len(fila))))
        print("‚îÄ" * len(encabezado))
        print("\nüîç Puedes usar esta informaci√≥n para buscar incidencias espec√≠ficas del jugador.")
        print(" Si necesitas m√°s detalles, usa el ID del jugador para buscar en el registro global.")
        print(" Estamos guardando los datos del jugador en memoria para analizarlos. Notificaremos cuando se complete el proceso.")
        
        # Crear archivo PlayerLog.txt espec√≠fico para este jugador
        archivo_player = utils.config.get_registro_simple()
        os.makedirs(os.path.dirname(archivo_player), exist_ok=True)
        
        # Usar la funci√≥n correcta para la versi√≥n CLI
        # Descargar registros espec√≠ficos del jugador usando la funci√≥n unificada
        
        try:
            # Usar la funci√≥n modificada que ahora acepta player_id
            exito, total_registros = guardar_registros_archivo(utils.config.WORLD, player_id=player_id)
            
            if exito and total_registros > 0:
                print(color_texto(f"‚úÖ Se descargaron {total_registros} registros del jugador", "verde"))
                print(color_texto(f"üìÑ Archivo guardado en: {archivo_player}", "azul"))
            elif exito and total_registros == 0:
                print(color_texto("‚ö†Ô∏è No se encontraron registros nuevos para este jugador", "amarillo"))
            else:
                print(color_texto("‚ùå Error al descargar registros del jugador", "rojo"))
                
        except Exception as e:
            print(color_texto(f"‚ùå Error en la descarga: {e}", "rojo"))

    else:
        print("No se encontr√≥ la tabla de cookies para este jugador.")
        
        
def menu_player(player_name=None):
    from funciones.extra import color_texto
    while True:
        print(color_texto("‚ïê" * 55, "azul"))
        print(
            color_texto("üîé Men√∫ de an√°lisis para el jugador: ", "azul")
            + color_texto(f"{player_name}", "verde")
        )
        print(color_texto("‚ïê" * 55, "azul"))
        print("  1Ô∏è‚É£  Ver An√°lisis Global de Incidencias")
        print("  2Ô∏è‚É£  Incidencias por Coincidencias de Acciones")
        print("  3Ô∏è‚É£  Incidencias por Granjeo")
        print("  4Ô∏è‚É£  Incidencias por Recolecci√≥n")
        print("  5Ô∏è‚É£  An√°lisis avanzado (All Analysis)")
        print("  6Ô∏è‚É£  Incidencias por Desbloqueo de Recolecci√≥n")
        print("  7Ô∏è‚É£  Pr√≥ximamente...")
        print("  8Ô∏è‚É£  Detecci√≥n de Bots")
        print("  0Ô∏è‚É£  Salir al Men√∫ Principal")
        print(color_texto("‚ïê" * 55, "azul"))
        opcion = input(color_texto("\nüëâ Selecciona una opci√≥n 1-8 (Enter para salir): ", "verde")).strip()
        if opcion == "" or opcion == "0":
            print(color_texto("üëâ Saliendo del men√∫ del jugador... Entrando en Men√∫ Principal.", "amarillo"))
            break
        elif opcion == "1":
            analisis_completo(utils.config.get_registro_simple())  
            input(color_texto("üîö An√°lisis completo finalizado. Pulsa Enter para continuar...", "azul"))
        elif opcion == "2":
            analizar_coincidencias_simple(utils.config.get_registro_simple())
            input(color_texto("üîö An√°lisis de coincidencias finalizado. Pulsa Enter para continuar...", "azul"))
        elif opcion == "3":
            analizar_farmeos()
            input(color_texto("üîö An√°lisis de granjeos finalizado. Pulsa Enter para continuar...", "azul"))
        elif opcion == "4":
            analizar_reco()
            input(color_texto("üîö An√°lisis de recolecciones finalizado. Pulsa Enter para continuar...", "azul"))
        elif opcion == "5":
            
            input(color_texto("üîö An√°lisis avanzado finalizado. Pulsa Enter para continuar...", "azul"))
        elif opcion == "6":
            analizar_unlock_reco(utils.config.get_registro_simple())
            input(color_texto("üîö An√°lisis de desbloqueo de recolecciones finalizado. Pulsa Enter para continuar...", "azul"))
        elif opcion == "7":
            print(color_texto("\nü§ñ An√°lisis a√∫n no implementado. ¬°Pr√≥ximamente!", "amarillo"))
            input(color_texto("Pulsa Enter para continuar...", "azul"))
        elif opcion == "8":
            print(color_texto("\nü§ñ An√°lisis a√∫n no implementado. ¬°Pr√≥ximamente!", "amarillo"))
            input(color_texto("Pulsa Enter para continuar...", "azul"))
        else:
            print(color_texto("‚ö†Ô∏è  Opci√≥n no v√°lida. Intenta de nuevo.", "rojo"))
            input(color_texto("Pulsa Enter para continuar...", "azul"))

